import cjs from "@rollup/plugin-commonjs";
import json from "@rollup/plugin-json";
import nodeResolve from "@rollup/plugin-node-resolve";
import inject from "@rollup/plugin-inject";
import sourcemaps from "rollup-plugin-sourcemaps";
import { terser } from "rollup-plugin-terser";

/**
 * @type {rollup.RollupFileOptions}
 */
const config = {
  input: "./esm/batchIndex.js",
  external: ["@azure/ms-rest-js", "@azure/ms-rest-azure-js"],
  output: {
    file: "./dist/batch.js",
    format: "umd",
    name: "Azure.Batch",
    sourcemap: true,
    globals: {
      "@azure/ms-rest-js": "msRest",
      "@azure/ms-rest-azure-js": "msRestAzure"
    },
    banner: `/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */`
  },
  plugins: [
    nodeResolve({
      mainFields: ["module", "main"],
      preferBuiltins: false
    }),
    sourcemaps(),
    cjs({
      namedExports: {
        "url-parse": ["url"],
        jssha: ["jssha"]
      }
    }),
    inject({
      modules: {
        Buffer: ["buffer", "Buffer"],
        process: "process"
      },
      exclude: ["./**/package.json"]
    }),
    json(),
    terser()
  ],
  onwarn: (warning) => {
    if (
      warning.code === "CIRCULAR_DEPENDENCY" &&
      warning.importer.indexOf(path.normalize("node_modules/chai/lib") === 0)
    ) {
      // Chai contains circular references, but they are not fatal and can be ignored.
      return;
    }

    console.error(`(!) ${warning.message}`);
  }
};

export default config;
